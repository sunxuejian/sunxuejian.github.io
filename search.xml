<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Jenkins远程部署插件Publish-over-SSH</title>
      <link href="/2018/10/22/Jenkins%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2%E6%8F%92%E4%BB%B6Publish-over-SSH/"/>
      <url>/2018/10/22/Jenkins%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2%E6%8F%92%E4%BB%B6Publish-over-SSH/</url>
      
        <content type="html"><![CDATA[<blockquote><p>publish over ssh是jenkins上一个插件,可以在jenkins系统管理-&gt;插件管理-&gt;可选插件中搜索到,然后安装,其主要的作用就是用于,远程登录到目标主机上.并且可以在目标主机上执行一些脚本.</p></blockquote><a id="more"></a><hr><h1 id="如何做到远程持续集成"><a href="#如何做到远程持续集成" class="headerlink" title="如何做到远程持续集成."></a>如何做到远程持续集成.</h1><hr><hr><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><blockquote><p>我们的java项目在Jenkins上编译打包,可是我们想让Jenkins上打包出来的程序在另一台机器上执行,那么我们如何做到呢,首先你总得ssh到目标机器上,然后执行相应的脚本吧,所以我们用到了 <font color="red">publish over ssh</font> 我们需要在jenkins上安装这个插件.</p></blockquote><hr><h1 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h1><hr><blockquote><p>点击系统管理</p></blockquote><p><img src="/image/SSH_PUBLISH/jm.jpg" alt="系统管理"></p><blockquote><p>点击插件管理</p></blockquote><p><img src="/image/SSH_PUBLISH/jpm.jpg" alt="插件管理"></p><blockquote><p>搜索插件,并安装</p></blockquote><p><img src="/image/SSH_PUBLISH/sp.jpg" alt="install"></p><blockquote><p>下载好插件后,进入到系统管理中的系统设置中,然后往下拉,找到 Publish over SSH这一栏进行配置</p></blockquote><p><img src="/image/SSH_PUBLISH/sshset.jpg" alt="ssh配置"></p><h2 id="如何生成ssh密匙"><a href="#如何生成ssh密匙" class="headerlink" title="如何生成ssh密匙"></a>如何生成ssh密匙</h2><blockquote><p>如果需要jenkins远程登录到目标主机,需要在目标主机对应的用户下面生存ssh密匙</p></blockquote><ol><li>首先检查该用户有没有生成过ssh密匙</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#如果发现有存在 .ssh目录就不需要生成了,可以直接用</span></span><br><span class="line">ls -al ~/</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果不存在执行以下命令生成</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">"xxxx@email.com"</span></span><br></pre></td></tr></table></figure><ol start="2"><li>使用 ls -al ~/ 就能看到生成的ssh密匙了,将对应的目录配置到jenkins上就行了</li></ol><blockquote><p>执行TestConfiguration测试ssh是否成功生效,如果不成功,请检查ssh配置是否有误(基本没有任何问题这一步)</p></blockquote><p><img src="/image/SSH_PUBLISH/test.jpg" alt="测试"></p><blockquote><p>到此安装和配置ssh结束,接下来要具体配置我们的jenkins job</p></blockquote><hr><h1 id="Jenkins-Job中使用Publish-over-SSH"><a href="#Jenkins-Job中使用Publish-over-SSH" class="headerlink" title="Jenkins Job中使用Publish over SSH"></a>Jenkins Job中使用Publish over SSH</h1><hr><ol><li>点开你的jenkins job 拉倒构建后操作这一栏,选择我们安装好的publish over ssh</li></ol><p><img src="/image/SSH_PUBLISH/job1.png" alt="SSH配置"></p><ol start="2"><li>配置说明</li></ol><p><img src="/image/SSH_PUBLISH/set.png" alt="SSH配置"></p><p>到这所有的配置都结束了,非常简单,这个<font color="red">Transfer Set</font>可以配置很多个,非常灵活.<font color="red">Exec command<font> 执行块可以在文件上传后的一些操作.</font></font></p><blockquote><p><font color="red">注意:</font> Exec command这个里面所写的脚本一定要确保正常退出,不然jenkins会编译不过,可能引发超时,如果遇到该问题,请参考这篇文章:<a href="https://blog.csdn.net/u013066244/article/details/52788407" target="_blank" rel="noopener">Publish over SSH 超时问题</a></p></blockquote><hr><blockquote><p> <a href="https://github.com/sunxuejian/Springboot-plugins/tree/master/db-manager" target="_blank" rel="noopener">数据库版本控制工具(Flyway)，支持程序升级(spring-boot),maven命令操作</a></p></blockquote><blockquote><p>有什么疑问联系我：</p></blockquote><center><img src="/image/wechar.jpg" alt="Image 微信"></center>]]></content>
      
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> devOps </tag>
            
            <tag> 持续集成 </tag>
            
            <tag> 远程部署 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>如何在springboot容器启动后做些事情</title>
      <link href="/2018/10/21/%E5%A6%82%E4%BD%95%E5%9C%A8springboot%E5%AE%B9%E5%99%A8%E5%90%AF%E5%8A%A8%E5%90%8E%E5%81%9A%E4%BA%9B%E4%BA%8B%E6%83%85/"/>
      <url>/2018/10/21/%E5%A6%82%E4%BD%95%E5%9C%A8springboot%E5%AE%B9%E5%99%A8%E5%90%AF%E5%8A%A8%E5%90%8E%E5%81%9A%E4%BA%9B%E4%BA%8B%E6%83%85/</url>
      
        <content type="html"><![CDATA[<p>通常有些事情是需要在整个spring容器完全构建之后让程序自动调用处理，有些人喜欢用 <font color="red"> @PostConstruct </font> 来作为程序启动时加载我觉得是不合理的，在spring容器的装载过程如果出现了问题，我们需要适当的让他自己停止整个程序，而使用  <font color="red"> @PostConstruct </font> 有时候并不能带来好的效果，接下来我们举出几种方法，可以我们在整个spring容器正常构建完之后，做出一些我们自己的处理</p><a id="more"></a><h1 id="PostConstruct-类构造方法执行后调用"><a href="#PostConstruct-类构造方法执行后调用" class="headerlink" title="@PostConstruct (类构造方法执行后调用)"></a>@PostConstruct (类构造方法执行后调用)</h1><hr><blockquote><p>从Java EE5规范开始，Servlet增加了两个影响Servlet生命周期的注解（Annotation）:这里我们只介绍<font color="red"> @PostConstruct </font> ，这个注解被用来修饰一个非静态的void()方法.而且这个方法不能有抛出异常声明，被 <font color="red"> @PostConstruct </font> 修饰的方法会在服务器加载Servlet的时候运行，并且只会被服务器调用一次，类似于Serclet的inti()方法。被<font color="red"> @PostConstruct </font> 修饰的方法会在构造函数之后，init()方法之前运行。</p></blockquote><p>@PostConstruct 确实能做到在依赖注入完毕并且构造方法完毕后能自动被执行，但是如果你的程序中有很多除需要使用的 @PostConstruct ,并且要保证他们的执行顺序这就比较麻烦了,</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MqMock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">" MqMock initialized ...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">"Config initialized ..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><font color="red">执行结果:</font><p><img src="/image/springboot/postlog.jpg" alt="日志"></p><p>从日志看来，这两个方法被 <font color="red"> @PostConstruct </font> 修饰过后都被自动执行了，但是他们只是在当前bean被构建完之后调用的，不是容器彻底构建完，而且顺序也无法保证，当然你可以通过 <font color="red"> @Order </font> 来控制类的构造顺序，这里我详细提了，<strong>是否是需要使用<font color="red"> @PostConstruct </font> 这个就看你们的需求了</strong>.</p><hr><h1 id="CommandLineRunner"><a href="#CommandLineRunner" class="headerlink" title="CommandLineRunner"></a>CommandLineRunner</h1><hr><p><a href="https://docs.spring.io/spring-boot/docs/2.0.6.RELEASE/reference/htmlsingle/#boot-features-command-line-runner" target="_blank" rel="noopener">官方文档介绍</a><br>引用一段介绍：</p><blockquote><p>If you need to run some specific code once the SpringApplication has started, you can implement the ApplicationRunner or CommandLineRunner interfaces. Both interfaces work in the same way and offer a single run method, which is called just before SpringApplication.run(…​) completes.</p></blockquote><p>大概意思就是如果你想要在spring应用启动完成后执行一些代码，你可以实现 <font color="red">ApplicationRunner</font>接口，或者<font color="red">CommandLineRunner</font>接口，这两个接口的作用是一致的。</p><p>还是刚刚那个例子这回我们在<font color="red">CommandLineRunner</font>接口方法中调用，这回可以指定顺序了，你可以随心所欲把他放在哪一行执行<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BootDemoApplication</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MqMock mqMock;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Config config;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(BootDemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">"before ..."</span>);</span><br><span class="line">        mqMock.init();</span><br><span class="line">        log.info(<span class="string">"after ..."</span>);</span><br><span class="line">        config.init();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><font color="red">执行结果</font>：</p><p><img src="/image/springboot/started.png" alt="日志"></p><p>从日志中分析，很明显能看到springboot已经执行完毕，这是后我们只需要把我们的类注入过来，进行方法调用，就完事了，是不是很简单，而且这个过程是可控制的。</p><hr><h1 id="ApplicationStartedEvent"><a href="#ApplicationStartedEvent" class="headerlink" title="ApplicationStartedEvent"></a>ApplicationStartedEvent</h1><hr><p>在springboot构建过程中它会调用一组监听器，来传递给不同的处理器来进行各自的处理，关于springboot的监听器机制，我会在另一篇文档详细说明，这里我们就还是以我们当前文章的主题进行。我们这里使用的是ApplicationStartedEvent来做到和 <font color="red"> CommandLineRunner </font> 等同的效果</p><blockquote><p> ApplicationStartedEvent是springboot整个容器构建过程最后一个事件，所以我们只需要监听这个事件，就能达到和CommandLineRunner一样的效果，</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodControl</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">ApplicationStartedEvent</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ApplicationStartedEvent applicationStartedEvent)</span> </span>&#123;</span><br><span class="line">        ConfigurableApplicationContext context = applicationStartedEvent.getApplicationContext();</span><br><span class="line">        MqMock mqMock = context.getBean(MqMock.class);</span><br><span class="line">        Config config = context.getBean(Config.class);</span><br><span class="line">        log.info(<span class="string">"测试springboot started event之后启动"</span>);</span><br><span class="line">        log.info(<span class="string">"before ..."</span>);</span><br><span class="line">        mqMock.init();</span><br><span class="line">        log.info(<span class="string">"after ..."</span>);</span><br><span class="line">        config.init();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="red">特别注意：我们在实现监听器后必须要给他注册到springboot启动程序中，这个动作是靠注解做不到的，下面我们举例两种方式</font></p><ol><li>在resource目下创建 <font color="red"> META-INF </font> 目录，并在该目录下创建 <font color="red"> spring.factories </font>文件</li></ol><p><img src="/image/springboot/metainf.png" alt="创建目录"></p><p><font color="red"> spring.factories内容</font>：</p><p><img src="/image/springboot/ies.png" alt="配置文件"></p><ol start="2"><li>在启动方法中添加监听器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BootDemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication</span><br><span class="line">                .run(BootDemoApplication.class, args)</span><br><span class="line">                .addApplicationListener(<span class="keyword">new</span> MethodControl());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>以上方式 任选其一到即可</p></blockquote><p><font color="red">好了，我们配置完监听器后来看一下效果</font>：</p><p><img src="/image/springboot/log.png" alt="日志输出"></p><p>好了，到这我们三种方式都已经结束了，更推荐<font color="red"> CommandLineRunner </font>，如果你需要获取到整个上下文的信息，可能监听器更适合你。</p><hr><blockquote><p> <a href="https://github.com/sunxuejian/Springboot-plugins/tree/master/db-manager" target="_blank" rel="noopener">数据库版本控制工具(Flyway)，支持程序升级(spring-boot),maven命令操作</a></p></blockquote><blockquote><p>有什么疑问联系我：</p></blockquote><center><img src="/image/wechar.jpg" alt="Image 微信"></center>]]></content>
      
      
      
        <tags>
            
            <tag> Springboot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>logback的快速应用</title>
      <link href="/2018/10/14/logback/"/>
      <url>/2018/10/14/logback/</url>
      
        <content type="html"><![CDATA[<p>logback是当下最受欢迎的log记录工具，高性能，功能全，文档全，作者是log4j的作者，<br>本文从logback常用的组件和功能点进行介绍，并提供了简单的例子参考，<a href="https://logback.qos.ch/" target="_blank" rel="noopener">logback官网</a></p><a id="more"></a><h2 id="java中如何使用logback"><a href="#java中如何使用logback" class="headerlink" title="java中如何使用logback"></a>java中如何使用logback</h2><blockquote><p>在pom中引入关键的两个包</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/ch.qos.logback/logback-core --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- https://mvnrepository.com/artifact/ch.qos.logback/logback-classic --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在resources目录下创建一个logback.xml就可以了,请参考[<em>logback.xml详细的例子</em>]这个章节</p><h2 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h2><blockquote><p>推荐使用以下几种,级别从高到低排列</p></blockquote><table><thead><tr><th>Level</th><th>描述</th></tr></thead><tbody><tr><td>ERROR</td><td>错误事件可能仍然允许应用程序继续运行</td></tr><tr><td>WARN</td><td>指定具有潜在危害的情况</td></tr><tr><td>INFO</td><td>指定能够突出在粗粒度级别的应用程序运行情况的信息的消息</td></tr><tr><td>DEBUG</td><td>指定细粒度信息事件是最有用的应用程序调试</td></tr></tbody></table><hr><h2 id="Appender级别"><a href="#Appender级别" class="headerlink" title="Appender级别"></a>Appender级别</h2><blockquote><p><a href="https://logback.qos.ch/manual/appenders.html" target="_blank" rel="noopener">What is an Appender?</a></p></blockquote><center> Appender class dependency </center><p><img src="/image/appender.jpg" alt="appender"></p><h3 id="ConsoleAppender-将日志输出到控制台"><a href="#ConsoleAppender-将日志输出到控制台" class="headerlink" title="ConsoleAppender (将日志输出到控制台)"></a><strong><font color="red" size="5">ConsoleAppender</font></strong> (将日志输出到控制台)</h3><blockquote><p>将日志信息打印在控制台中</p></blockquote><table><thead><tr><th>配置</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>encoder</td><td><a href="https://logback.qos.ch/xref/ch/qos/logback/core/encoder/Encoder.html" target="_blank" rel="noopener">Encoder</a></td><td>日志输出格式</td></tr><tr><td>target</td><td>String</td><td>日志输出目标，可以是System.out或者System.err，默认是System.out</td></tr><tr><td>withJansi</td><td>boolean</td><td>默认是false，这个使用不到，好像是开启后输出的ANSI会有颜色，具体看官网介绍</td></tr></tbody></table><p><strong><font color="red">sample</font></strong>:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- encoders are assigned the type</span></span><br><span class="line"><span class="comment">         ch.qos.logback.classic.encoder.PatternLayoutEncoder by default --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%-4relative [%thread] %-5level %logger&#123;35&#125; - %msg %n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p><hr><h3 id="FileAppender-将日志输出到文件中"><a href="#FileAppender-将日志输出到文件中" class="headerlink" title="FileAppender(将日志输出到文件中)"></a><strong><font color="red" size="5">FileAppender</font></strong>(将日志输出到文件中)</h3><blockquote><p>FileAppender OutputStreamAppender的子类,将日志输出到指定文件中。如果文件已经存在,根据配置属性来判断在末尾追加或者重新生成文件</p></blockquote><table><thead><tr><th>配置</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>append</td><td>boolean</td><td>默认为true,会将日志追加到现有文件末尾</td></tr><tr><td>encoder</td><td><a href="https://logback.qos.ch/xref/ch/qos/logback/core/encoder/Encoder.html" target="_blank" rel="noopener">Encoder</a></td><td>日志输出格式</td></tr><tr><td>file</td><td>String</td><td>文件名，可以带路径，如不过文件或目录不存在则会创建，例如: logs/info.log,该属性没有默认值</td></tr><tr><td>immediateFlush</td><td>boolean</td><td>一旦有日志产生立即刷新到文件，通过情况下把它设为false，以提高性能，因为会频繁的flush buffer;</td></tr></tbody></table><p><strong><font color="red">sample</font></strong>:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 使用时间戳作为文件名 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">timestamp</span> <span class="attr">key</span>=<span class="string">"bySecond"</span> <span class="attr">datePattern</span>=<span class="string">"yyyyMMdd'T'HHmmss"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.FileAppender"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">file</span>&gt;</span>testFile-$&#123;bySecond&#125;.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">append</span>&gt;</span>true<span class="tag">&lt;/<span class="name">append</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- set immediateFlush to false for much higher logging throughput --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">immediateFlush</span>&gt;</span>true<span class="tag">&lt;/<span class="name">immediateFlush</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- encoders are assigned the type</span></span><br><span class="line"><span class="comment">         ch.qos.logback.classic.encoder.PatternLayoutEncoder by default --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%-4relative [%thread] %-5level %logger&#123;35&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"FILE"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p><hr><h3 id="RollingFileAppender-滚动式输出"><a href="#RollingFileAppender-滚动式输出" class="headerlink" title="RollingFileAppender(滚动式输出)"></a><strong><font color="red" size="5">RollingFileAppender</font></strong>(滚动式输出)</h3><blockquote><p><a href="https://logback.qos.ch/xref/ch/qos/logback/core/rolling/RollingFileAppender.html" target="_blank" rel="noopener">RollingFileAppender</a>继承于FileAppender, 按照一些特定策略生成滚动文件，例如与TimeBasedRollingPolicy策略搭配时，当文件到达指定时间，会重新生成一个新的文件，关于策略，后面章节会有具体详细介绍。</p></blockquote><table><thead><tr><th>配置</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>append</td><td>boolean</td><td>看FileAppender配置</td></tr><tr><td>encoder</td><td><a href="https://logback.qos.ch/xref/ch/qos/logback/core/encoder/Encoder.html" target="_blank" rel="noopener">Encoder</a></td><td>看FileAppender配置</td></tr><tr><td>file</td><td>String</td><td>看FileAppender配置</td></tr><tr><td>rollingPolicy</td><td>RollingPolicy</td><td>日志滚动策略：配置这个选项会让日志文件按照指定策略进行滚动</td></tr><tr><td>triggeringPolicy</td><td>TriggeringPolicy</td><td>触发滚动策略：通常搭配rollingPolicy一起使用，用于设置滚动的触发条件</td></tr></tbody></table><p><strong><font color="red">sample</font></strong>:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"errorAppender"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.RollingFileAppender"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">file</span>&gt;</span>logs/error.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置滚动策略 TimeBasedRollingPolicy 按日期滚动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置日志命名模式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>errorFile.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--最多保留30天log--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 超过150MB时，立即触发滚动策略，生成新的文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">triggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>150<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">triggeringPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d [%p] %-5level %logger - %msg%newline<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="日志文件策略-Policy-常用"><a href="#日志文件策略-Policy-常用" class="headerlink" title="日志文件策略 *Policy(常用)"></a>日志文件策略 *Policy(常用)</h2><h3 id="TimeBasedRollingPolicy-按日期滚动策略"><a href="#TimeBasedRollingPolicy-按日期滚动策略" class="headerlink" title="TimeBasedRollingPolicy(按日期滚动策略)"></a><strong><font color="red" size="5">TimeBasedRollingPolicy</font></strong>(按日期滚动策略)</h3><blockquote><p><a href="https://logback.qos.ch/xref/ch/qos/logback/core/rolling/TimeBasedRollingPolicy.html" target="_blank" rel="noopener">TimeBasedRollingPolicy</a> 可能是logback最受欢迎的滚动策略，基于时间的滚动，可以是一天也可以是一个月，这个较为常用，通常我们可以设置一天生成一个新的文件，很好归纳，统计</p></blockquote><table><thead><tr><th>配置</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>fileNamePattern</td><td>String</td><td>log文件命名规则，通常使用%d来按天或按月输出，例如errorFile.%d{yyyy-MM-dd}.log，生成出来的文件类似于errorFile.2018-10-09.log，带上日期后这样每天生成的文件就不会名字重复了，这个还支持选择时区，例如%d{yyyy-MM-dd,UTC}</td></tr><tr><td>maxHistory</td><td>int</td><td>日志保留天数，超过该天数的历史日志文件将会被logback<font color="red">异步删除</font></td></tr><tr><td>totalSizeCap</td><td>int</td><td>归档文件的总大小，优先应用maxHistory的策略。</td></tr><tr><td>cleanHistoryOnStart</td><td>boolean</td><td>默认为false,触发归档文件立即删除的动作。</td></tr></tbody></table><blockquote><p><em>滚动输出支持自动压缩</em>,文件名以.gz或者.zip结尾即可，例如：/wombat/foo.%d.gz</p></blockquote><p><strong><font color="red">sample</font></strong>:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">file</span>&gt;</span>logFile.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- daily rollover --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>logFile.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- keep 30 days' worth of history capped at 3GB total size --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">totalSizeCap</span>&gt;</span>3GB<span class="tag">&lt;/<span class="name">totalSizeCap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%-4relative [%thread] %-5level %logger&#123;35&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"FILE"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p><hr><h3 id="SizeAndTimeBasedRollingPolicy-按大小和时间滚动策略"><a href="#SizeAndTimeBasedRollingPolicy-按大小和时间滚动策略" class="headerlink" title="SizeAndTimeBasedRollingPolicy(按大小和时间滚动策略)"></a><strong><font color="red" size="5">SizeAndTimeBasedRollingPolicy</font></strong>(按大小和时间滚动策略)</h3><blockquote><p>这个应该是最常用的吧，按照指定时间和文件大小的策略来滚动日志。废话不多说看下面的例子</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"ROLLING"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">file</span>&gt;</span>mylog.txt<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- rollover daily --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>mylog-%d&#123;yyyy-MM-dd&#125;.%i.txt<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- each file should be at most 100MB, keep 60 days worth of history, but at most 20GB --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span>    </span><br><span class="line">       <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>60<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">totalSizeCap</span>&gt;</span>20GB<span class="tag">&lt;/<span class="name">totalSizeCap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"ROLLING"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>请注意除“％d”之外的“％i”转换标记。 ％i和％d令牌都是强制性的。 每当当前日志文件在当前时间段结束之前达到maxFileSize时，它将以增加的索引存档，从0开始</p></blockquote><hr><h3 id="FixedWindowRollingPolicy-以固定的算法策略生成滚动文件-不常用"><a href="#FixedWindowRollingPolicy-以固定的算法策略生成滚动文件-不常用" class="headerlink" title="FixedWindowRollingPolicy(以固定的算法策略生成滚动文件 不常用)"></a><strong><font color="red" size="5">FixedWindowRollingPolicy</font></strong>(以固定的算法策略生成滚动文件 不常用)</h3><blockquote><p>这个策略不常用，咱就不多bb了,属性和其他滚动策略是一样的，通常文件命名规范是这样的：tests.%i.log，当到达条件触发滚动时会生成文件test1.log,test2.log,test3.log …</p></blockquote><hr><h3 id="SizeBasedTriggeringPolicy-根据大小触发滚动的策略"><a href="#SizeBasedTriggeringPolicy-根据大小触发滚动的策略" class="headerlink" title="SizeBasedTriggeringPolicy(根据大小触发滚动的策略)"></a><strong><font color="red" size="5">SizeBasedTriggeringPolicy</font></strong>(根据大小触发滚动的策略)</h3><blockquote><p>这个<triggeringpolicy>标签里的配置，用来触发滚动时间的，例如文件大小到了指定值，就是触发滚动</triggeringpolicy></p></blockquote><p><strong><font color="red">sample</font></strong>:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">file</span>&gt;</span>test.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.FixedWindowRollingPolicy"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>test.%i.log.zip<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">minIndex</span>&gt;</span>1<span class="tag">&lt;/<span class="name">minIndex</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">maxIndex</span>&gt;</span>3<span class="tag">&lt;/<span class="name">maxIndex</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">triggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>5MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">triggeringPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%-4relative [%thread] %-5level %logger&#123;35&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"FILE"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="fileNamePatten的一些规则-例子，按年，月，日，天，时，分，秒滚动"><a href="#fileNamePatten的一些规则-例子，按年，月，日，天，时，分，秒滚动" class="headerlink" title="fileNamePatten的一些规则(例子，按年，月，日，天，时，分，秒滚动)"></a>fileNamePatten的一些规则(例子，按年，月，日，天，时，分，秒滚动)</h2><table><thead><tr><th>例子</th><th>描述</th></tr></thead><tbody><tr><td>/wombat/foo.%d</td><td>按天滚动，格式 年-月-日，都生成在一个文件夹中</td></tr><tr><td>/wombat/%d{yyyy/MM}/foo.txt</td><td>按月滚动，每个月生成一个相同的文件，在不同的月份文件夹中，例如first: /wombat/2018/09/foo.txt，next: /wombat/2018/10/foo.txt</td></tr><tr><td>/wombat/foo.%d{yyyy-ww}.log</td><td>每周生成一次，每周的第一天开始重新生成</td></tr><tr><td>/wombat/foo%d{yyyy-MM-dd_HH}.log</td><td>每小时生成一次</td></tr><tr><td>/wombat/foo%d{yyyy-MM-dd_HH-mm}.log</td><td>每分钟生成一次</td></tr><tr><td>/wombat/foo%d{yyyy-MM-dd_HH-mm, UTC}.log</td><td>按指定时区每分钟生成一次</td></tr><tr><td>/foo/%d{yyyy-MM,aux}/%d.log</td><td>每天生成一次，按照年和月区分，例如，/foo/2018-09/中存在一个月的log，log名是每天的日期</td></tr></tbody></table><hr><h2 id="encoder规则-日志输出格式"><a href="#encoder规则-日志输出格式" class="headerlink" title="encoder规则(日志输出格式)"></a>encoder规则(日志输出格式)</h2><table><thead><tr><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>%m</td><td>输出代码中指定的消息</td></tr><tr><td>%p</td><td>输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL</td></tr><tr><td>%r</td><td>输出自应用启动到输出该log信息耗费的毫秒数</td></tr><tr><td>%c</td><td>输出所属的类目，通常就是所在类的全名</td></tr><tr><td>%t</td><td>输出产生该日志事件的线程名</td></tr><tr><td>%n</td><td>输出一个回车换行符，Windows平台为“/r/n”，Unix平台为“/n”</td></tr><tr><td>%d</td><td>输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss , SSS}，输出类似：2002年10月18日 22:10：28，921</td></tr><tr><td>%l</td><td>输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java: 10 )</td></tr></tbody></table><h3 id="配置："><a href="#配置：" class="headerlink" title="配置："></a>配置：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    　　　　　　　　　　</span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 日期 [线程] [class类]-[日志级别] log内容 回车符号 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; [%t] [%c]-[%p] %m%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span>　　　　　　　　　</span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        　　　　　　　　　　</span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 输出INFO及以上的日志 --&gt;</span>　　　　　　</span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 让自定义的appender生效 --&gt;</span>　　　　　　　　　　　</span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span>/&gt;</span>　　　　　　　　　　</span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    　　　　　　　　</span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="控制台输出："><a href="#控制台输出：" class="headerlink" title="控制台输出："></a>控制台输出：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2018-10-09 14:27:55 [main] [org.springframework.web.servlet.handler.SimpleUrlHandlerMapping]-[INFO] Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]</span><br><span class="line">2018-10-09 14:27:55 [main] [org.springframework.jmx.export.annotation.AnnotationMBeanExporter]-[INFO] Registering beans for JMX exposure on startup</span><br><span class="line">2018-10-09 14:27:55 [main] [org.apache.coyote.http11.Http11NioProtocol]-[INFO] Starting ProtocolHandler [&quot;http-nio-6677&quot;]</span><br><span class="line">2018-10-09 14:27:55 [main] [org.apache.tomcat.util.net.NioSelectorPool]-[INFO] Using a shared selector for servlet write/read</span><br><span class="line">2018-10-09 14:27:55 [main] [org.springframework.boot.web.embedded.tomcat.TomcatWebServer]-[INFO] Tomcat started on port(s): 6677 (http) with context path &apos;&apos;</span><br><span class="line">2018-10-09 14:27:55 [main] [com.xj.plugins.Springboot2AnalyzeApplication]-[INFO] Started Springboot2AnalyzeApplication in 2.014 seconds (JVM running for 3.949)</span><br></pre></td></tr></table></figure><blockquote><p>在控制输出的log还可以进行颜色设置，更方便查看log，区分log级别</p></blockquote><hr><h2 id="控制台输出的log配置颜色"><a href="#控制台输出的log配置颜色" class="headerlink" title="控制台输出的log配置颜色"></a>控制台输出的log配置颜色</h2><table><thead><tr><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>%black</td><td>黑色</td></tr><tr><td>%red</td><td>红色</td></tr><tr><td>%green</td><td>绿色</td></tr><tr><td>%yellow</td><td>黄色</td></tr><tr><td>%blue</td><td>蓝色</td></tr><tr><td>%magenta</td><td>品红</td></tr><tr><td>%cyan</td><td>青色</td></tr><tr><td>%white</td><td>白色</td></tr><tr><td>%gray</td><td>灰色</td></tr><tr><td>%highlight</td><td>高亮色</td></tr><tr><td>%bold</td><td>更鲜艳色颜色，强化以上所有的颜色，例如%boldRed,%boldBlack</td></tr></tbody></table><h3 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    　　　　　　　　　　</span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 日期 [线程] [class类]-[日志级别] log内容 回车符号 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%blue(%d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125;) [%cyan(%t)] [%yellow(%c)]-[%highlight(%p)] %m%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span>　　　　　　　　　</span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        　　　　　　　　　　</span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 输出INFO及以上的日志 --&gt;</span>　　　　　　</span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 让自定义的appender生效 --&gt;</span>　　　　　　　　　　　</span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span>/&gt;</span>　　　　　　　　　　</span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    　　　　　　　　</span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>配置过后的控制台输出</p></blockquote><p><img src="/image/log.jpg" alt="增加色彩输出"></p><hr><h2 id="完整的logback-xml文件"><a href="#完整的logback-xml文件" class="headerlink" title="完整的logback.xml文件"></a>完整的logback.xml文件</h2><blockquote><p>该样例文件主要是配置了比较通用的三种模式</p><ol><li>定向输出，控制台输出，全量的日志文件</li><li>将error日志输出到error.log,warn日志输出到warn.log,将全量日志输出到main.log文件中</li></ol></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_HOME"</span> <span class="attr">value</span>=<span class="string">"logs"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 输出到控制台 --&gt;</span>　　</span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 日期 [线程] [class类]-[日志级别] log内容 回车符号 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%blue(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;) %cyan(%t) %yellow(%c)-%highlight(%p) %m%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span>　　　　　　　　　</span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 所有信息输出到main.log 按天和大小滚动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"MAIN"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%t] [%c]-[%p] %m%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- rollover daily --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/main-%d&#123;yyyy-MM-dd&#125;.%i.txt<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 文件最大30MB,保留60天，总大小20GB --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>30MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>60<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">totalSizeCap</span>&gt;</span>20GB<span class="tag">&lt;/<span class="name">totalSizeCap</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"ERROR"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%t] [%c]-[%p] %m%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- rollover daily --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/error-%d&#123;yyyy-MM-dd&#125;.%i.txt<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 文件最大30MB,保留60天，总大小20GB --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>30MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>60<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">totalSizeCap</span>&gt;</span>20GB<span class="tag">&lt;/<span class="name">totalSizeCap</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 过滤器,只写入error级别log --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"WARN"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- rollover daily --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/warn-%d&#123;yyyy-MM-dd&#125;.%i.txt<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 文件最大30MB,保留60天，总大小20GB --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>30MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>60<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">totalSizeCap</span>&gt;</span>20GB<span class="tag">&lt;/<span class="name">totalSizeCap</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 过滤器,只写入warn级别，log --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>WARN<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%t] [%c]-[%p] %m%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 输出INFO及以上的日志 --&gt;</span>　　　　　　</span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 让自定义的appender生效 --&gt;</span>　　　　　　　　　　　</span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span>/&gt;</span>　　</span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"MAIN"</span>/&gt;</span>　　　　　　　　　　</span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"ERROR"</span>/&gt;</span>　　　　　　　　　　</span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"WARN"</span>/&gt;</span>　　　　　　　　　　</span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    　　　　　　　　</span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="关于日志定向输出和读取环境变量的问题"><a href="#关于日志定向输出和读取环境变量的问题" class="headerlink" title="关于日志定向输出和读取环境变量的问题"></a>关于日志定向输出和读取环境变量的问题</h2><h3 id="定向输出"><a href="#定向输出" class="headerlink" title="定向输出"></a>定向输出</h3><blockquote><p>logback.xml中如何需要将某中日志输出到文件中可以使用过滤器,类似于以下这个例子</p></blockquote><p><font color="red"> xml配置过滤器,例如将error日志输出到error.log中</font></p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"ERROR"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%t] [%c]-[%p] %m%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- rollover daily --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/error-%d&#123;yyyy-MM-dd&#125;.%i.txt<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- 文件最大30MB,保留60天，总大小20GB --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>30MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>60<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">totalSizeCap</span>&gt;</span>20GB<span class="tag">&lt;/<span class="name">totalSizeCap</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- 过滤器,只写入error级别log --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>如果有需要特殊log需要定向输出的话可以重写 Filter<iloggingevent>方法</iloggingevent></p></blockquote> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLogFilter</span> <span class="keyword">extends</span> <span class="title">Filter</span>&lt;<span class="title">ILoggingEvent</span>&gt; </span>&#123;   </span><br><span class="line">        <span class="meta">@Override</span>   </span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> FilterReply <span class="title">decide</span><span class="params">(ILoggingEvent event)</span> </span>&#123;</span><br><span class="line">                   </span><br><span class="line">            <span class="keyword">if</span>(event.getMessage() != <span class="keyword">null</span></span><br><span class="line">                    &amp;&amp; (event.getMessage().startsWith(<span class="string">"test"</span>)</span><br><span class="line">                    || event.getMessage().startsWith(<span class="string">"demo"</span>))) &#123;</span><br><span class="line">                <span class="keyword">return</span> FilterReply.ACCEPT;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> FilterReply.DENY;</span><br><span class="line">            &#125;       </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>然后将filter加入到你的appender中</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 过滤器,写入test和demo开头的日志 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"xx.xxx.xxxx.MyLogFilter"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="logback-xml读取环境变量"><a href="#logback-xml读取环境变量" class="headerlink" title="logback.xml读取环境变量"></a>logback.xml读取环境变量</h3><blockquote><p>logback.xml支持两种读取方式,从系统环境中读取，从spring配置文件中读取</p></blockquote><blockquote><p>读取系统环境变量 通过${envName}方式获取</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 从系统环境变量读取日志输出目录 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_HOME"</span> <span class="attr">value</span>=<span class="string">"$&#123;log.dir&#125;"</span>/&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>读取spring配置文件的方式</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 从context中读取所以不需要使用$&#123;&#125;获取 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">"context"</span> <span class="attr">name</span>=<span class="string">"LOG_HOME"</span> <span class="attr">source</span>=<span class="string">"logback.dir"</span>/&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> logback </tag>
            
            <tag> 日志框架 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CentOs7下安装Mysql5.7+版本</title>
      <link href="/2018/10/07/Centos7%20%E4%B8%8B%E5%AE%89%E8%A3%85MySql%205.7+/"/>
      <url>/2018/10/07/Centos7%20%E4%B8%8B%E5%AE%89%E8%A3%85MySql%205.7+/</url>
      
        <content type="html"><![CDATA[<p>mysql 5.7及之后的版本有点小变化，本文基于centos 7进行mysql5.7版本的安装,<br>包括了基本安装，用户权限，及密码修改等操作。</p><a id="more"></a><h3 id="安装前奏"><a href="#安装前奏" class="headerlink" title="安装前奏"></a>安装前奏</h3><p>1：去官网下载 5.7或以上版本的mysql tar.gz包</p><p>  下载地址： <a href="https://www.mysql.com/downloads/" target="_blank" rel="noopener">link</a></p><p>2：使用root在Linux下创建 mysql用户及用户组<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">2.1：创建组</span><br><span class="line"></span><br><span class="line">    [root@localhost]# groupadd mysql</span><br><span class="line"></span><br><span class="line">2.2: 创建用户并加入到组中</span><br><span class="line"></span><br><span class="line">    [root@localhost]# useradd -r -g mysql mysql</span><br><span class="line"></span><br><span class="line">2.3: 禁止mysql用户登录系统（可选 防止别人使用mysql用户登录到主机）</span><br><span class="line">    [root@localhost]# usermod -s /bin/false mysql</span><br></pre></td></tr></table></figure></p><p>3: 将下载好的包放入到 /opt/mysql/ 下（目录按自己的喜好存储）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">3.1：解压文件</span><br><span class="line"></span><br><span class="line">    [root@localhost]# tar -xvf mysql-5.7.21-linux-glibc2.12-x86_64.tar.gz</span><br><span class="line"></span><br><span class="line">3.2: 修改解压好的目录命名</span><br><span class="line"></span><br><span class="line">    [root@localhost]# mv mysql-5.7.21-linux-glibc2.12-x86_64 mysql-5.7.21</span><br><span class="line"></span><br><span class="line">3.3: 更改目录所属的用户和组</span><br><span class="line"></span><br><span class="line">    [root@localhost]# chown -R mysql mysql/</span><br><span class="line"></span><br><span class="line">    [root@localhost]# chgrp -R mysql mysql/</span><br></pre></td></tr></table></figure></p><hr><h3 id="开始安装Mysql"><a href="#开始安装Mysql" class="headerlink" title="开始安装Mysql"></a>开始安装Mysql</h3><ol><li>进入到 /opt/mysql/mysql-5.7.21/support-files 目录下，查看是否有 my_default.cnf<br>如果没有执行1.1的步骤：</li></ol><p>1.1. 在support-files目录下创建 my_default.cnf 文件</p><pre><code>[root@localhost]# mkdir my_default.cnf</code></pre><p>1.2. 将以下内容复制到文件中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"># For advice on how to change settings please see</span><br><span class="line"># http://dev.mysql.com/doc/refman/5.6/en/server-configuration-defaults.html</span><br><span class="line"># *** DO NOT EDIT THIS FILE. It&apos;s a template which will be copied to the</span><br><span class="line"># *** default location during install, and will be replaced if you</span><br><span class="line"># *** upgrade to a newer version of MySQL.</span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line"></span><br><span class="line">port = 3306</span><br><span class="line">socket = /opt/mysql/mysql.sock</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line"></span><br><span class="line"># Remove leading # and set to the amount of RAM for the most important data</span><br><span class="line"># cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.</span><br><span class="line"># innodb_buffer_pool_size = 128M</span><br><span class="line"></span><br><span class="line"># Remove leading # to turn on a very important data integrity option: logging</span><br><span class="line"># changes to the binary log between backups.</span><br><span class="line"># log_bin</span><br><span class="line"></span><br><span class="line"># These are commonly set, remove the # and set as required.</span><br><span class="line"># basedir = .....</span><br><span class="line"># datadir = .....</span><br><span class="line"># port = .....</span><br><span class="line"># server_id = .....</span><br><span class="line"># socket = .....</span><br><span class="line">#skip-grant-tables #跳过登录验证</span><br><span class="line">#innodb_force_recovery=1</span><br><span class="line">basedir = /opt/mysql/mysql-5.7.21/</span><br><span class="line">datadir = /opt/mysql/data/</span><br><span class="line">port = 3306</span><br><span class="line">server_id = 1</span><br><span class="line">socket = /opt/mysql/mysql.sock</span><br><span class="line">language = /opt/mysql/mysql-5.7.21/share/english</span><br><span class="line">#log-bin = /opt/mysql/mysql-5.7.21/mysql-bin</span><br><span class="line">expire_logs_days = 10</span><br><span class="line">max_binlog_size = 100M</span><br><span class="line"></span><br><span class="line">#general_log = 1</span><br><span class="line">#general_log_file = /opt/mysql/mysql-5.7.21/logs/query.log</span><br><span class="line"></span><br><span class="line">slow_query_log = 1</span><br><span class="line">slow_query_log_file = /opt/mysql/mysql-5.7.21/logs/slow-query.log</span><br><span class="line">long-query_time = 2</span><br><span class="line"></span><br><span class="line">log-error = /opt/mysql/mysql-5.7.21/logs/error.log</span><br><span class="line"></span><br><span class="line"># Remove leading # to set options mainly useful for reporting servers.</span><br><span class="line"># The server defaults are faster for transactions and fast SELECTs.</span><br><span class="line"># Adjust sizes as needed, experiment to find the optimal values.</span><br><span class="line"># join_buffer_size = 128M</span><br><span class="line"># sort_buffer_size = 2M</span><br><span class="line"># read_rnd_buffer_size = 2M</span><br><span class="line"></span><br><span class="line">sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br></pre></td></tr></table></figure></p><ol start="2"><li><p>将该文件移到/etc/目录下并改名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1: mysql 启动默认读取/etc/my.cnf配置文件,使用命令将文件挪到该目录</span><br><span class="line"></span><br><span class="line">[root@localhost support-files]# mv my_default.cnf /etc/my.cnf</span><br></pre></td></tr></table></figure></li><li><p>将/opt/mysql/mysql-5.7.21/supprot-files/mysql.server 移动到 /etc/init.d/</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost]#  mv /opt/mysql/mysql-5.7.21/supprot-files/mysql.server /etc/init.d/mysqld</span><br></pre></td></tr></table></figure></li></ol><p>4.创建mysql的数据存储目录以及日志目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1：创建data目录</span><br><span class="line"></span><br><span class="line">[root@localhost]# mkdir /opt/mysql/data</span><br><span class="line"></span><br><span class="line">2: 创建日志目录及日志文件，如果不创建启动会报错</span><br><span class="line"></span><br><span class="line">[root@localhost]# mkdir /opt/mysql/mysql-5.7.21/logs</span><br><span class="line"></span><br><span class="line">[root@localhost]# touch /opt/mysql/mysql-5.7.21/logs/error.log</span><br></pre></td></tr></table></figure></p><ol start="5"><li>配置 my.cnf 文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1：修改 my.cnf</span><br><span class="line">[root@localhost etc]# vi /etc/my.cnf</span><br><span class="line"> basedir = /opt/mysql/mysql-5.7.21（mysql安装目录）</span><br><span class="line"> datadir = /opt/mysql/data (上一步创建的data路径)</span><br><span class="line"> socket = /opt/mysql/mysql.sock （该文件会自动创建在你指定的位置）</span><br><span class="line"> log*的配置：只需要改一些log存放的路径，上一步已经创建了logs目录，把所以关于log的路径都指向 /opt/mysql/mysql-5.7.21/logs目录</span><br></pre></td></tr></table></figure><ol start="6"><li>一切就绪准备安装服务<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1：进入到Mysql bin目录下执行命令</span><br><span class="line">[root@localhost bin]# ./mysqld --initialize-insecure --user=mysql --basedir=/opt/mysql/mysql-5.7.21/ --datadir=/opt/mysql/data/</span><br><span class="line">如果上不没有ERROR 就表示安装成功</span><br></pre></td></tr></table></figure></li></ol><p>7：启动服务</p><p>进入到 /etc/init.d/下执行启动命令：<br>[root@localhost init.d] ./mysqld start</p><p>执行完毕看到 Mysql Start SUCCESS 表示成功</p><p>8：连接到mysql服务端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 进入到mysql bin目录下执行命令</span><br><span class="line">[root@localhost bin] ./mysql -uroot -p</span><br><span class="line">输入密码即可连接</span><br></pre></td></tr></table></figure><p>9： 忘记了root密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">1. 先停止已启动服务</span><br><span class="line">[root@localhost init.d] ./mysqld stop</span><br><span class="line">2. 修改my.cnf文件</span><br><span class="line">[root@localhost etc] vi my.cnf</span><br><span class="line">加入一行：skip-grant-tables #跳过登录验证</span><br><span class="line">3. 重启mysql服务 ./mysqld start</span><br><span class="line">4. bin目录下连接mysql : ./mysql</span><br><span class="line">mysql&gt; grant all privileges on *.* to &apos;root&apos;@&apos;localhost&apos; identified by &apos;123465&apos; with grant option;</span><br><span class="line">如果显示：The MySQL server is running with the --skip-grant-tables option so it cannot execute this statement</span><br><span class="line">表示当前用户没有写入的权限，修改权限执行这组命令在执行上句命令</span><br><span class="line">【 mysql&gt; set global read_only=0;// 关掉数据库的只读属性</span><br><span class="line">   mysql&gt;flush privileges;// 刷新配置</span><br><span class="line">】</span><br><span class="line">如果无任何错误信息：执行 mysql&gt;flush privileges</span><br><span class="line"></span><br><span class="line">mysql&gt; exit;</span><br><span class="line">6:将my.cnf加上的跳过验证删除，然后在重启mysql服务。至此，mysql安装完成</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">第二中修改密码的方式：</span><br><span class="line">按照第一步跳过验证的步骤登录mysql执行： ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;root123&apos;;</span><br><span class="line">授权远程登录：GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;mypassword&apos; WITH GRANT OPTION;</span><br><span class="line">FLUSH  PRIVILEGES;</span><br></pre></td></tr></table></figure></p><ol start="10"><li>修改密码后依旧无法登陆<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">使用第9步骤跳过登陆验证，按如下指令操作</span><br><span class="line">1. use mysql;</span><br><span class="line">2. select plugin from user where user=&apos;root&apos;; 检查该表中是否存在这个字段，如不存在执行 update user set plugin=&apos;mysql_native_password&apos;;</span><br><span class="line">3. 执行密码修改 update user set authentication_string=password(&apos;123456&apos;) where user=&apos;root&apos; and host=&apos;localhost&apos;;</span><br><span class="line">4. 刷新权限 flush privileges;</span><br><span class="line">5. 去掉跳过验证，重启服务即可</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="创建用户，授权"><a href="#创建用户，授权" class="headerlink" title="创建用户，授权"></a>创建用户，授权</h2><hr><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><ol><li><p>命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER &apos;username&apos;@&apos;host&apos; IDENTIFIED BY &apos;password&apos;;</span><br></pre></td></tr></table></figure></li><li><p>例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER &apos;dog&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;123456&apos;;</span><br><span class="line"></span><br><span class="line">CREATE USER &apos;dog2&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;&apos;;</span><br></pre></td></tr></table></figure></li></ol><font color="red" size="4"><br> PS：username - 你将创建的用户名,<br> host - 指定该用户在哪个主机上可以登陆，此处的”localhost”，是指该用户只能在本地登录，不能在另外一台机器上远程登录，如果想远程登录的话，将”localhost”改为”%”，表示在任何一台电脑上都可以登录;也可以指定某台机器可以远程登录;<br> password - 该用户的登陆密码,密码可以为空,如果为空则该用户可以不需要密码登陆服务器。<br></font><hr><h3 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h3><ol><li>命令:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT privileges ON databasename.tablename TO &apos;username&apos;@&apos;host&apos;</span><br></pre></td></tr></table></figure></li></ol><font color="red" size="4"><br>PS: privileges - 用户的操作权限,如SELECT , INSERT , UPDATE 等(详细列表见该文最后面).如果要授予所的权限则使用ALL.;databasename - 数据库名,tablename-表名,如果要授予该用户对所有数据库和表的相应操作权限则可用<em>表示, 如</em>.*.<br></font><p>例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT SELECT, INSERT ON mq.* TO &apos;dog&apos;@&apos;localhost&apos;;</span><br></pre></td></tr></table></figure></p><hr><h3 id="创建用户同时授权"><a href="#创建用户同时授权" class="headerlink" title="创建用户同时授权"></a>创建用户同时授权</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; grant all privileges on mq.* to test@localhost identified by &apos;1234&apos;;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure><p>PS:必须执行flush privileges;</p><p>否则登录时提示：ERROR 1045 (28000): Access denied for user ‘user‘@’localhost’ (using password: YES )</p><hr><h3 id="设置与更改用户密码"><a href="#设置与更改用户密码" class="headerlink" title="设置与更改用户密码"></a>设置与更改用户密码</h3><p>命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET PASSWORD FOR &apos;username&apos;@&apos;host&apos; = PASSWORD(&apos;newpassword&apos;);</span><br></pre></td></tr></table></figure></p><h3 id="撤销用户权限"><a href="#撤销用户权限" class="headerlink" title="撤销用户权限"></a>撤销用户权限</h3><p>命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REVOKE privilege ON databasename.tablename FROM &apos;username&apos;@&apos;host&apos;;</span><br></pre></td></tr></table></figure></p><p>说明: privilege, databasename, tablename - 同授权部分.</p><font color="red" size="4"><br>PS: 假如你在给用户‘dog‘@’localhost’’授权的时候是这样的(或类似的):GRANT SELECT ON test.user TO ‘dog‘@’localhost’, 则在使用REVOKE SELECT ON <em>.</em> FROM ‘dog‘@’localhost’;命令并不能撤销该用户对test数据库中user表的SELECT 操作.相反,如果授权使用的是GRANT SELECT ON <em>.</em> TO ‘dog‘@’localhost’;则REVOKE SELECT ON test.user FROM ‘dog‘@’localhost’;命令也不能撤销该用户对test数据库中user表的Select 权限.<br></font><blockquote><p>具体信息可以用命令SHOW GRANTS FOR ‘dog‘@’localhost’; 查看.</p></blockquote><h3 id="查看用户的授权"><a href="#查看用户的授权" class="headerlink" title="查看用户的授权"></a>查看用户的授权</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show grants for dog@localhost;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> mysql </tag>
            
            <tag> 使用mysql </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
